services:
  app_blue:
    image: "${BLUE_IMAGE}"
    container_name: app_blue
    restart: unless-stopped
    environment:
      PORT: "${PORT}"
      RELEASE_ID: "${RELEASE_ID_BLUE}"
      APP_POOL: "blue"
    ports:
      - "${BLUE_HOST_PORT}:${PORT}"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/healthz || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s

  app_green:
    image: "${GREEN_IMAGE}"
    container_name: app_green
    restart: unless-stopped
    environment:
      PORT: "${PORT}"
      RELEASE_ID: "${RELEASE_ID_GREEN}"
      APP_POOL: "green"
    ports:
      - "${GREEN_HOST_PORT}:${PORT}"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/healthz || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s

  nginx:
    image: nginx:stable
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/upstream.conf:/etc/nginx/upstream.conf
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.sh
      - nginx_logs:/var/log/nginx  # Shared log volume
    environment:
      ACTIVE_POOL: "${ACTIVE_POOL}"
      BLUE_HOST: "app_blue"
      BLUE_PORT: "${PORT}"
      GREEN_HOST: "app_green"
      GREEN_PORT: "${PORT}"
    depends_on:
      app_blue:
        condition: service_healthy
      app_green:
        condition: service_healthy
    networks:
      - app_network
    entrypoint: ["/bin/sh", "/docker-entrypoint.sh"]

  # NEW: Alert Watcher Service
  alert_watcher:
    build:
      context: ./watcher
      dockerfile: Dockerfile
    container_name: alert_watcher
    restart: unless-stopped
    environment:
      SLACK_WEBHOOK_URL: "${SLACK_WEBHOOK_URL}"
      ERROR_RATE_THRESHOLD: "${ERROR_RATE_THRESHOLD:-2.0}"
      WINDOW_SIZE: "${WINDOW_SIZE:-200}"
      ALERT_COOLDOWN_SEC: "${ALERT_COOLDOWN_SEC:-300}"
      LOG_FILE: "/var/log/nginx/access.log"
      MAINTENANCE_MODE: "${MAINTENANCE_MODE:-false}"
    volumes:
      - nginx_logs:/var/log/nginx # Read and write access to logs
    depends_on:
      - nginx
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  nginx_logs:  # Shared volume for logs