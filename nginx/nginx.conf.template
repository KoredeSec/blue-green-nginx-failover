worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    # CUSTOM LOG FORMAT FOR OBSERVABILITY
    log_format observability escape=json
        '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":$status,'
        '"upstream_status":"$upstream_status",'
        '"upstream_addr":"$upstream_addr",'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"pool":"$upstream_http_x_app_pool",'
        '"release":"$upstream_http_x_release_id"'
        '}';

    # Write logs to shared volume
    access_log /var/log/nginx/access.log observability;

    # Timeout settings
    proxy_connect_timeout 2s;
    proxy_send_timeout 3s;
    proxy_read_timeout 3s;

    # Include dynamic upstream config
    include /etc/nginx/upstream.conf;

    # Preserve custom headers from backend apps
    proxy_pass_header X-App-Pool;
    proxy_pass_header X-Release-Id;

    server {
        listen 80;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_buffering off;

            # Retry configuration for automatic failover
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 6s;

            proxy_pass http://backend_pool;
        }

        # Nginx health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
